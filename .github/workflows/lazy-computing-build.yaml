name: Build Maven Project

on:
  push:
    branches:
      - 'main'
      - 'feature/*'
  pull_request:
    branches:
      - 'main'
env:
  REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
  USERNAME: ${{ vars.DOCKER_HUB_USERNAME }}
  PACKAGE: ${{ vars.PACKAGE_NAME }}

jobs:
  config:
    uses: digilinq/reusable-workflows/.github/workflows/project-configuration.yaml@t16

  build:
    name: build
    needs:
      - config
    uses: digilinq/reusable-workflows/.github/workflows/build-maven-project.yaml@t16
    with:
      runner: 'ubuntu-latest'
      ref: ${{ github.ref }}
      java-version: ${{ needs.config.outputs.java-version }}
      maven-version: ${{ needs.config.outputs.maven-version }}
      artifact-name: 'Package'
      artifact-path: 'web/target/*.jar'
      docker-file: 'deployment/Dockerfile'

  docker-container-registry:
    name: image-specifications
    uses: digilinq/reusable-workflows/.github/workflows/docker-image-specifications.yaml@t19
    with:
      registry: ${{ vars.CONTAINER_REGISTRY }}
      owner: ${{ vars.DOCKER_HUB_USERNAME }}
      image: ${{ vars.PACKAGE_NAME }}

  create-docker-image-1:
    name: Create docker image
    needs:
      - config
      - build
      - docker-container-registry
    uses: digilinq/reusable-workflows/.github/workflows/create-docker-image.yaml@t21
    with:
      runner: 'ubuntu-latest'
      artifact-name: 'Package'
      docker-image: ${{ needs.docker-container-registry.outputs.specifications }}
    secrets:
      container-registry-password: ${{ secrets.DOCKER_HUB_PASSWORD }}

  create-docker-image:
    name: Create docker image
    runs-on: 'ubuntu-latest'
    needs:
      - config
      - build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Package
      - name: Print event name
        run: echo "The event name is ${{ github.event_name }}"
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.PACKAGE }}
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}},value=${{ inputs.version }}
            type=ref,event=branch,suffix=-{{ sha }}
            type=ref,event=pr
          flavor: |
            latest=auto
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
