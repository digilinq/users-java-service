openapi: 3.0.3
info:
  title: User microservice
  version: 1.0.5
paths:
  /users:
    get:
      description: Return list of users based on given parameters
      operationId: findUsers
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
            maxLength: 40
          example: username
        - in: query
          name: email
          required: false
          schema:
            type: string
            format: email
      responses:
        200:
          description: A list of users is populated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      description: Save a new user into database
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
  /users/{userId}:
    get:
      description: Return the User based on given userId, username or email
      operationId: findUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            example: 88acdc9a-78c8-11ed-a1eb-0242ac120002
      responses:
        200:
          description: User found by given userId, username or email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid email or userId
        404:
          description: User not found
  /users/{userId}/credentials:
    get:
      description: Return credentioals by given userId
      operationId: getUserCredentioals
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User credentials populated for given userId. Empty list if there is no credential
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
        403:
          description: Forbiden
        404:
          description: User not found
        422:
          description: User is disabled or not activated
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - confirmPassword
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
    CreateUserResponse:
      type: object
      required:
        - userId
        - email
      properties:
        userId:
          type: string
          format: uuid
        email:
          type: string
          format: email
    Credential:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
